// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(uuid())
  name      String?
  email     String?  @unique
  password  String?
  verified  Boolean? @default(false)
  role      String?  @default("user")
  mobileNo  String? @unique
  country   String?
  city      String?
  address   String?
  postalCode String?
  profilePic String?
  bio       String?
  online    Boolean? @default(false)
  lastSeen  DateTime?
  rating    Float? @default(0)
  accountType String? @default("personal")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quotePost     QuotePost[] 
  quoteReply    QuoteReply[]
  quoteLike     QuoteLike[]
}
model ForumMainCategory {
  id        String   @id @default(uuid())
  name      String?
  enabled   Boolean? @default(false)
}
model ForumSubCategory {
  id        String   @id @default(uuid())
  name      String?
  enabled   Boolean? @default(false)
}
model QuotePost {
  id               String    @id @default(uuid())
  title            String?
  description      String?
  userId           String
  name             String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  totalNetWeight   Float?
  totalGrossWeight Float?
  volumetricWeight Float?
  transitInsurance Boolean?
  width            Float?
  height           Float?
  length           Float?
  viewCount        Int?
  likesCount       Int?
  commentsCount    Int?
  dangerousGoods   Boolean?
  status           String?   @default("pending")
  rejectionReason  String?
  fromPostalCode   String?
  toPostalCode     String?
  fromCity         String?
  toCity           String?
  fromCountry      String?
  toCountry        String?
  fromAddress      String?
  toAddress        String?
  fromState        String?
  toState          String?
  postMainCategory String?
  postSubCategory  String?
  shipmentType     String?
  quoteReply       QuoteReply[]
  quoteLike        QuoteLike[]
  subCategory      ForumSubCategory?  @relation(fields: [postSubCategory], references: [id])
  mainCategory     ForumMainCategory? @relation(fields: [postMainCategory], references: [id])
  user             User?              @relation(fields: [userId], references: [id])
}

model QuoteReply {
id String @id @default(uuid())
userId String 
postId String 
parentReplyId String
createdAt DateTime @default(now())
user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
post           QuotePost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model QuoteLike {
  id     String    @id @default(uuid())
  userId String
  postId String
  user   User      @relation(fields: [userId], references: [id])
  post   QuotePost @relation(fields: [postId], references: [id])
}

model GeneralPost {
  id                      String             @id @default(uuid())
  title                   String?
  description             String?
  userId                  String
  createdBy               String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  viewCount               Int?
  likesCount              Int?               @default(0)
  commentsCount           Int?               @default(0)
  status                  String?            @default("pending")
  rejectionReason         String?
  generalPostMainCategory String?
  generalPostSubCategory  String?
  user                    User               @relation(fields: [userId], references: [id])
  MainCategory            ForumMainCategory? @relation(fields: [generalPostMainCategory], references: [id])
  subCategory             ForumSubCategory?  @relation(fields: [generalPostSubCategory], references: [id])
  generalReply            GeneralReply[]
  generalLike             GeneralLike[]
}

model GeneralReply {
  id              String      @id @default(uuid())
  userId          String
  postId          String
  parentReplyId   String?
  description     String?
  createdAt       DateTime    @default(now())
  status          String?     @default("pending")
  rejectionReason String?
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            GeneralPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentReply     GeneralReply? @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies    GeneralReply[] @relation("ReplyToReply")
}

model GeneralLike {
  id     String      @id @default(uuid())
  userId String
  postId String
  user   User        @relation(fields: [userId], references: [id])
  post   GeneralPost @relation(fields: [postId], references: [id])
}

model Blog {
  id          String      @id @default(uuid())
  title       String
  description Json    
  authorId    String 
  author      User     @relation(fields: [authorId], references: [id])
  status      String
  createdAt   DateTime @default(now())
  category    String
  image_url   String[]
}


//admin:

model Admin {
  id      String   @id @default(uuid())
  name    String
  email   String   @unique
  courses Course[]
}


// Courses:

model Course {
  id                String           @id @default(uuid())
  slug              String           @unique
  institution       String
  title             String
  description       String
  instructor        String
  logoUrl           String
  thumbnailUrl      String
  brochureUrl       String
  youtubeShortUrl   String
  educationLevel    EducationLevel
  courseDifficulty  CourseDifficulty
  mode              CourseMode
  currency          Currency         @default(INR)
  price             Int
  duration          String
  language          String
  status            CourseStatus     @default(DRAFT)
  category          String
  enrollmentCount   Int              @default(0)
  tags              String[]

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  createdBy         Admin            @relation(fields: [createdById], references: [id])
  createdById       String
  modules           CourseModule[]
}

// Course Modules:
model CourseModule {
  id          String   @id @default(uuid())
  title       String
  description String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  createdAt   DateTime @default(now())
}

// Institution Enquiry:
model CourseQuery {
  id                       String          @id @default(uuid())
  institutionName          String
  institutionType          InstitutionType @default(UNIVERSITY)
  primaryContactName       String
  primaryContactTitle      String
  contactEmail             String
  contactPhone             String
  websiteUrl               String
  message                  String?         // optional field for additional notes
  createdAt                DateTime        @default(now())
}



