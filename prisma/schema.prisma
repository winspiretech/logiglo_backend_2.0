// schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EducationLevel {
  HIGH_SCHOOL
  UNDERGRADUATE
  POSTGRADUATE
  DOCTORATE
  OTHER
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseMode {
  ONLINE
  OFFLINE
  HYBRID
}

enum Currency {
  INR
  USD
  EUR
  GBP
  OTHER
}

enum InstitutionType {
  SCHOOL
  COLLEGE
  UNIVERSITY
  INSTITUTE
  OTHER
}

enum NotificationType {
  POST_LIKED
  POST_REPLIED
  REPLY_REPLIED
  POST_STATUS_CHANGED
  BLOG_STATUS_CHANGED
  EVENT_CREATED
  COURSE_ENQUIRY_SUBMITTED
  EVENT_UPCOMING
}

model User {
  id                      String         @id @default(uuid())
  name                    String
  email                   String?        @unique
  password                String?
  verified                Boolean?       @default(false)
  role                    String?        @default("user")
  mobileNo                String?        @unique
  country                 String?
  city                    String?
  address                 String?
  postalCode              String?
  profilePic              String?
  bio                     String?
  online                  Boolean?       @default(false)
  lastSeen                DateTime?
  rating                  Float?         @default(0)
  accountType             String?        @default("personal")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  quotePost               QuotePost[]
  quoteReply              QuoteReply[]
  quoteLike               QuoteLike[]    @relation("UserToQuoteLike")
  generalPost             GeneralPost[]  @relation("UserToGeneralPost")
  generalReply            GeneralReply[]
  generalLike             GeneralLike[]  @relation("UserToGeneralLike")
  blog                    Blog[]
  Course                  Course[]
  Event                   Event[]
  receivedNotifications   Notification[] @relation("RecipientNotifications")
  triggeredNotifications  Notification[] @relation("TriggeredNotifications")
}

model ForumMainCategory {
  id          String             @id @default(uuid())
  name        String?            @unique
  enabled     Boolean?           @default(false)
  subCategory ForumSubCategory[]
  quotePost   QuotePost[]
  generalPost GeneralPost[]
}

model ForumSubCategory {
  id             String            @id @default(uuid())
  name           String?           @unique
  enabled        Boolean?          @default(false)
  mainCategoryId String
  quotePost      QuotePost[]
  generalPost    GeneralPost[]
  mainCategory   ForumMainCategory @relation(fields: [mainCategoryId], references: [id])
}

model QuotePost {
  id               String             @id @default(uuid())
  title            String
  description      String
  userId           String
  name             String?
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  totalNetWeight   Float?
  totalGrossWeight Float?
  volumetricWeight Float?
  transitInsurance Boolean?
  width            Float?
  height           Float?
  length           Float?
  viewCount        Int?
  likesCount       Int?
  commentsCount    Int?
  dangerousGoods   Boolean?
  status           String?            @default("pending")
  rejectionReason  String?
  fromPostalCode   String?
  toPostalCode     String?
  fromCity         String?
  toCity           String?
  fromCountry      String?
  toCountry        String?
  fromAddress      String?
  toAddress        String?
  fromState        String?
  toState          String?
  postMainCategory String?
  postSubCategory  String?
  shipmentType     String?
  quoteReply       QuoteReply[]
  quoteLike        QuoteLike[]        @relation("PostToQuoteLike")
  subCategory      ForumSubCategory?  @relation(fields: [postSubCategory], references: [id])
  mainCategory     ForumMainCategory? @relation(fields: [postMainCategory], references: [id])
  user             User               @relation(fields: [userId], references: [id])
  notifications    Notification[]
}

model QuoteReply {
  id              String        @id @default(uuid())
  userId          String
  postId          String
  parentReplyId   String?
  description     String?
  createdAt       DateTime      @default(now())
  status          String?       @default("pending")
  rejectionReason String?
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            QuotePost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentReply     QuoteReply?   @relation("QuoteReplyToReply", fields: [parentReplyId], references: [id])
  childReplies    QuoteReply[]  @relation("QuoteReplyToReply")
  notifications   Notification[]
}

model QuoteLike {
  id     String    @id @default(uuid())
  userId String
  postId String
  user   User      @relation("UserToQuoteLike", fields: [userId], references: [id])
  post   QuotePost @relation("PostToQuoteLike", fields: [postId], references: [id])
}

model GeneralPost {
  id                      String             @id @default(uuid())
  title                   String
  description             String
  userId                  String
  createdBy               String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  viewCount               Int?
  likesCount              Int?               @default(0)
  commentsCount           Int?               @default(0)
  status                  String?            @default("pending")
  rejectionReason         String?
  generalPostMainCategory String?
  generalPostSubCategory  String?
  user                    User               @relation("UserToGeneralPost", fields: [userId], references: [id])
  MainCategory            ForumMainCategory? @relation(fields: [generalPostMainCategory], references: [id])
  subCategory             ForumSubCategory?  @relation(fields: [generalPostSubCategory], references: [id])
  generalReply            GeneralReply[]
  generalLike             GeneralLike[]      @relation("PostToGeneralLike")
  notifications           Notification[]
}

model GeneralReply {
  id              String         @id @default(uuid())
  userId          String
  postId          String
  parentReplyId   String?
  description     String?
  createdAt       DateTime       @default(now())
  status          String?        @default("pending")
  rejectionReason String?
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            GeneralPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentReply     GeneralReply?  @relation("GeneralReplyToReply", fields: [parentReplyId], references: [id])
  childReplies    GeneralReply[] @relation("GeneralReplyToReply")
  notifications   Notification[]
}

model GeneralLike {
  id     String      @id @default(uuid())
  userId String
  postId String
  user   User        @relation("UserToGeneralLike", fields: [userId], references: [id])
  post   GeneralPost @relation("PostToGeneralLike", fields: [postId], references: [id])
}

model Blog {
  id            String        @id @default(uuid())
  title         String
  description   Json
  authorId      String
  author        User          @relation(fields: [authorId], references: [id])
  status        String
  createdAt     DateTime      @default(now())
  image_url     String[]
  categoryId    String?
  category      BlogCategory? @relation(fields: [categoryId], references: [id])
  notifications Notification[]
}

model Event {
  id            String        @id @default(uuid())
  authorId      String
  coverImage    String
  author        User          @relation(fields: [authorId], references: [id])
  eventTitle    String
  organizer     String
  countryCode   String
  contactNumber String
  emailAddress  String
  description   Json
  location      String
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  notifications Notification[]
}

model BlogCategory {
  id    String @id @default(uuid())
  name  String @unique
  blogs Blog[]
}

model Course {
  id              String           @id @default(uuid())
  institutionName String
  logo            String?
  title           String
  description     String?
  instructorName  String
  thumbnail       String?
  brochure        String?
  previewVideoUrl String?
  educationLevel  EducationLevel
  difficulty      CourseDifficulty
  mode            CourseMode
  currency        Currency
  duration        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdById     String
  createdBy       User             @relation(fields: [createdById], references: [id])
  modules         CourseModule[]
}

model CourseModule {
  id           String   @id @default(uuid())
  courseId     String
  sectionTitle String
  videoTitle   String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseEnquiry {
  id                    String        @id @default(uuid())
  institutionName       String
  institutionType       String
  contactPersonName     String
  contactPersonPosition String
  contactNumber         String
  website               String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  notifications       Notification[]
}

model CountriesData {
  id        Int          @id // Primary key
  shortname String
  name      String
  phonecode Int
  states    StatesData[]
  flag      String?
}

model StatesData {
  id         Int           @id // Primary key
  name       String
  country_id Int
  country    CountriesData @relation(fields: [country_id], references: [id])
  cities     CitiesData[]
}

model CitiesData {
  id       Int        @id // Primary key
  name     String
  state_id Int
  state    StatesData @relation(fields: [state_id], references: [id])
}

model Notification {
  id              String           @id @default(uuid())
  recipientId     String
  triggeredById   String?
  type            NotificationType
  message         String
  read            Boolean          @default(false)
  createdAt       DateTime         @default(now())
  quotePostId     String?
  generalPostId   String?
  quoteReplyId    String?
  generalReplyId  String?
  blogId          String?
  eventId         String?
  courseEnquiryId String?
  recipient       User             @relation("RecipientNotifications", fields: [recipientId], references: [id])
  triggeredBy     User?            @relation("TriggeredNotifications", fields: [triggeredById], references: [id])
  quotePost       QuotePost?       @relation(fields: [quotePostId], references: [id])
  generalPost     GeneralPost?     @relation(fields: [generalPostId], references: [id])
  quoteReply      QuoteReply?      @relation(fields: [quoteReplyId], references: [id])
  generalReply    GeneralReply?    @relation(fields: [generalReplyId], references: [id])
  blog            Blog?            @relation(fields: [blogId], references: [id])
  event           Event?           @relation(fields: [eventId], references: [id])
  courseEnquiry   CourseEnquiry?   @relation(fields: [courseEnquiryId], references: [id])
}
model LandingMenuItems{
  id          String @id @default(uuid())
  name  String
  enabled Boolean @default(false)
  @@index([name,enabled],name:"LandingMenuItems_name_enabled")
}
