// schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EducationLevel {
  HIGH_SCHOOL
  UNDERGRADUATE
  POSTGRADUATE
  DOCTORATE
  OTHER
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseMode {
  ONLINE
  OFFLINE
  HYBRID
}

enum Currency {
  INR
  USD
  EUR
  GBP
  OTHER
}

enum InstitutionType {
  SCHOOL
  COLLEGE
  UNIVERSITY
  INSTITUTE
  OTHER
}

enum NotificationType {
  POST_LIKED
  POST_REPLIED
  REPLY_REPLIED
  POST_STATUS_CHANGED
  BLOG_STATUS_CHANGED
  EVENT_CREATED
  COURSE_ENQUIRY_SUBMITTED
  EVENT_UPCOMING
}

model User {
  id                     String             @id @default(uuid())
  name                   String
  email                  String?            @unique
  password               String?
  verified               Boolean?           @default(false)
  role                   String?            @default("user")
  mobileNo               String?            @unique
  country                String?
  city                   String?
  address                String?
  postalCode             String?
  profilePic             String?
  bio                    String?
  online                 Boolean?           @default(false)
  lastSeen               DateTime?
  rating                 Float?             @default(0)
  accountType            String?            @default("personal")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  quotePost              QuotePost[]
  quoteReply             QuoteReply[]
  quoteLike              QuoteLike[]        @relation("UserToQuoteLike")
  generalPost            GeneralPost[]      @relation("UserToGeneralPost")
  generalReply           GeneralReply[]
  generalLike            GeneralLike[]      @relation("UserToGeneralLike")
  blog                   Blog[]
  Course                 Course[]
  Event                  Event[]
  receivedNotifications  Notification[]     @relation("RecipientNotifications")
  notificationPreferences UserNotificationPreference?
  Rating                 Rating[]
  BlogComment            BlogComment[]
  RequestToConnect       RequestToConnect[]
  otps                   Otp[]
}

// schema.prisma

// Enums for the new fields
enum PostType {
  DOCS
  NON_DOCS
}

enum ShipmentType {
  SAMPLE
  COMMERCIAL
}

enum ServiceType {
  DTD // Door to Door
  SELF // Self Drop & Self Pickup
}

enum IncotermType {
  EXW
  FCA
  FAS
  FOB
  CFR
  CIF
  CPT
  CIP
  DPU
  DAP
  DDP
}

model ForumMainCategory {
  id          String             @id @default(uuid())
  name        String?            @unique
  enabled     Boolean?           @default(false)
  subCategory ForumSubCategory[]
  quotePost   QuotePost[]
  generalPost GeneralPost[]
}

model ForumSubCategory {
  id             String            @id @default(uuid())
  name           String?
  enabled        Boolean?          @default(false)
  mainCategoryId String
  quotePost      QuotePost[]
  generalPost    GeneralPost[]
  mainCategory   ForumMainCategory @relation(fields: [mainCategoryId], references: [id])

  @@unique([name, mainCategoryId])
}

model QuotePost {
  id               String    @id @default(uuid())
  title            String
  description      String
  userId           String
  name             String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  totalNetWeight   Float?
  totalGrossWeight Float?
  volumetricWeight Float?
  transitInsurance Boolean?
  width            Float?
  height           Float?
  length           Float?
  viewCount        Int?
  likesCount       Int?
  commentsCount    Int?
  dangerousGoods   Boolean?
  status           String?   @default("pending")
  rejectionReason  String[]
  acceptReason     String?
  fromPostalCode   String?
  toPostalCode     String?
  fromCity         String?
  toCity           String?
  fromCountry      String?
  toCountry        String?
  fromAddress      String?
  toAddress        String?
  fromState        String?
  toState          String?
  postMainCategory String?
  postSubCategory  String?

  // New fields from the form
  postType     PostType? // Docs or Non-Docs
  shipmentType ShipmentType? // Sample or Commercial
  serviceType  ServiceType? // Door to Door or Self Drop & Self Pickup
  incoterm     IncotermType? // Selected Incoterm (EXW, FOB, etc.)
  incotermInfo String? // Description or info bound to the selected Incoterm

  // Relations
  quoteReply    QuoteReply[]
  quoteLike     QuoteLike[]        @relation("PostToQuoteLike")
  subCategory   ForumSubCategory?  @relation(fields: [postSubCategory], references: [id])
  mainCategory  ForumMainCategory? @relation(fields: [postMainCategory], references: [id])
  user          User               @relation(fields: [userId], references: [id])

}

model QuoteReply {
  id              String         @id @default(uuid())
  userId          String
  postId          String
  parentReplyId   String?
  description     String?
  createdAt       DateTime       @default(now())
  status          String?        @default("pending")
  rejectionReason String?
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            QuotePost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentReply     QuoteReply?    @relation("QuoteReplyToReply", fields: [parentReplyId], references: [id])
  childReplies    QuoteReply[]   @relation("QuoteReplyToReply")

}

model QuoteLike {
  id     String    @id @default(uuid())
  userId String
  postId String
  user   User      @relation("UserToQuoteLike", fields: [userId], references: [id])
  post   QuotePost @relation("PostToQuoteLike", fields: [postId], references: [id])
}

model GeneralPost {
  id                      String   @id @default(uuid())
  title                   String
  description             String
  userId                  String
  createdBy               String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  viewCount               Int?
  likesCount              Int?     @default(0)
  commentsCount           Int?     @default(0)
  status                  String?  @default("pending")
  rejectionReason         String[]
  acceptReason            String?
  generalPostMainCategory String?
  generalPostSubCategory  String?

  user          User               @relation("UserToGeneralPost", fields: [userId], references: [id])
  MainCategory  ForumMainCategory? @relation(fields: [generalPostMainCategory], references: [id])
  SubCategory   ForumSubCategory?  @relation(fields: [generalPostSubCategory], references: [id])
  generalReply  GeneralReply[]
  generalLike   GeneralLike[]      @relation("PostToGeneralLike")

}

model GeneralReply {
  id              String         @id @default(uuid())
  userId          String
  postId          String
  parentReplyId   String?
  description     String?
  createdAt       DateTime       @default(now())
  status          String?        @default("pending")
  rejectionReason String?
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            GeneralPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentReply     GeneralReply?  @relation("GeneralReplyToReply", fields: [parentReplyId], references: [id])
  childReplies    GeneralReply[] @relation("GeneralReplyToReply")

}

model GeneralLike {
  id     String      @id @default(uuid())
  userId String
  postId String
  user   User        @relation("UserToGeneralLike", fields: [userId], references: [id])
  post   GeneralPost @relation("PostToGeneralLike", fields: [postId], references: [id])
}

model Blog {
  id               String         @id @default(uuid())
  title            String
  description      String
  authorId         String
  author           User           @relation(fields: [authorId], references: [id])
  status           String
  createdAt        DateTime       @default(now())
  image_url        String[]
  categoryId       String?
  category         BlogCategory?  @relation(fields: [categoryId], references: [id])

  isArchived       Boolean        @default(false)
  unArchiveReasons String[]       @default([])
  BlogComment      BlogComment[]
}

enum EventMode {
  offline
  online
  hybrid
}

model Event {
  id               String           @id @default(uuid())
  authorId         String
  coverImages      String[]
  author           User             @relation(fields: [authorId], references: [id])
  eventTitle       String
  organizer        String
  countryCode      String?
  contactNumber    String?
  emailAddress     String?
  description      String
  mode             EventMode
  location         String?
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime         @default(now())

  isArchived       Boolean          @default(false)
  unArchiveReasons String[]         @default([])
  videoUrl         String
  brochure         String
  EventIntrested   EventIntrested[]
}

model BlogCategory {
  id    String @id @default(uuid())
  name  String @unique
  blogs Blog[]
}

model Course {
  id               String             @id @default(uuid())
  institutionName  String
  logo             String?
  title            String
  description      String?
  instructorName   String
  thumbnail        String?
  brochure         String?
  previewVideoUrl  String?
  educationLevel   EducationLevel
  difficulty       CourseDifficulty
  mode             CourseMode
  currency         Currency // e.g., INR, USD, EUR
  price            Float              @default(0.0) // Free courses allowed
  duration         String
  validUntil       DateTime? // Null means no expiration
  isActive         Boolean            @default(true) // Controls visibility
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdById      String
  createdBy        User               @relation(fields: [createdById], references: [id])
  modules          CourseModule[]
  Rating           Rating[]
  RequestToConnect RequestToConnect[]
}

model CourseModule {
  id           String   @id @default(uuid())
  courseId     String
  sectionTitle String
  videoTitle   String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum EnquiryStatus {
  pending
  resolved
  rejected
}

model CourseEnquiry {
  id                    String         @id @default(uuid())
  institutionName       String
  institutionType       String
  contactPersonName     String
  contactPersonPosition String
  contactNumber         String
  email                 String
  website               String
  message               String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  status                EnquiryStatus  @default(pending)
}

model CountriesData {
  id        Int          @id // Primary key
  shortname String
  name      String
  phonecode Int
  states    StatesData[]
  flag      String?
}

model StatesData {
  id         Int           @id // Primary key
  name       String
  country_id Int
  country    CountriesData @relation(fields: [country_id], references: [id])
  cities     CitiesData[]
}

model CitiesData {
  id       Int        @id // Primary key
  name     String
  state_id Int
  state    StatesData @relation(fields: [state_id], references: [id])
}

// Notification Model
model Notification {
  id                    String                    @id @default(uuid())
  recipientId           String
  recipient             User                      @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  type                  String                    // e.g., QUOTE_POST_CREATED, QUOTE_POST_ACCEPTED
  message               String
  quotePostId           String?                   // Optional reference to QuotePost
  quoteReplyId          String?                   // Optional reference to QuoteReply
  generalPostId         String?                   // Optional reference to GeneralPost
  generalReplyId        String?                   // Optional reference to GeneralPostReply
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
}

// User Notification Preferences Model
model UserNotificationPreference {
  id                    String                    @id @default(uuid())
  userId                String                    @unique
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotePostCreation     Boolean                   @default(true)
  quotePostModeration   Boolean                   @default(true)
  quotePostRejected     Boolean                   @default(true)
  quoteReplyCreation    Boolean                   @default(true)
  quoteReplyModeration  Boolean                   @default(true)
  quoteReplyRejected    Boolean                   @default(true)
  generalPostCreation   Boolean                   @default(true)
  generalPostModeration Boolean                   @default(true)
  generalPostRejected   Boolean                   @default(true)
  generalReplyCreation  Boolean                   @default(true)
  generalReplyModeration Boolean                  @default(true)
  generalReplyRejected  Boolean                   @default(true)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
}

// Email Server Configuration Model
model EmailServerConfig {
  id                    String                    @id @default(uuid())
  host                  String
  port                  Int
  secure                Boolean
  authUser              String
  authPass              String
  fromEmail             String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
}
model LandingMenuItems {
  id      String  @id @default(uuid())
  name    String
  enabled Boolean @default(false)

  @@index([name, enabled], name: "LandingMenuItems_name_enabled")
}

model CountriesDataWithFlag {
  id_country           Int    @id @default(autoincrement())
  Country_Name         String
  ISO2                 String @db.Char(2)
  ISO3                 String @db.Char(3)
  Top_Level_Domain     String
  FIPS                 String
  ISO_Numeric          Int
  GeoNameID            String
  E164                 Int
  Phone_Code           String
  Continent            String
  Capital              String
  Time_Zone_in_Capital String
  Currency             String
  Language_Codes       String
  Languages            String
  Area_KM2             Int
  Internet_Hosts       String
  Internet_Users       String
  Phones_Mobile        String
  Phones_Landline      String
  GDP                  String
}

model Rating {
  id       String  @id @default(uuid())
  userId   String
  courseId String
  rating   Decimal @db.Decimal(2, 1)
  user     User    @relation(fields: [userId], references: [id])
  course   Course  @relation(fields: [courseId], references: [id])
}

enum BlogStatus {
  pending
  rejected
  accepted
}

model BlogComment {
  id            String        @id @default(uuid())
  blogId        String
  userId        String
  status        BlogStatus    @default(pending)
  comment       String
  createdAt     DateTime      @default(now())
  parentId      String?
  user          User          @relation(fields: [userId], references: [id])
  blog          Blog          @relation(fields: [blogId], references: [id])
  parentComment BlogComment?  @relation("BlogParentComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies       BlogComment[] @relation("BlogParentComment")
}

model RequestToConnect {
  id       String @id @default(uuid())
  name     String
  email    String
  mobileNo String

  message String?
  status  RequestStatus @default(PENDING)
  userId  String
  user    User          @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  RESOLVED
}

model EventIntrested {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  mobileNo  String
  email     String
  createdAt DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
}

model ContactUs{
  id        String   @id @default(uuid())
  name      String
  email     String
  phoneNo   String
  city      String
  message   String
  createdAt DateTime @default(now())
}

model Otp {
  id   String @id @default(uuid())
  user User   @relation(fields: [userId], references: [id])
  userId String
  otpCode String
  expiresAt DateTime
  createdAt DateTime @default(now())
  verfied Boolean @default(false)
}