// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum used:

enum EducationLevel {
  UNDERGRADUATE
  GRADUATE
  POSTGRADUATE
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseMode {
  ONLINE
  OFFLINE
  HYBRID
}

enum Currency {
  INR
  USD
  EUR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum InstitutionType {
  SCHOOL
  COLLEGE
  UNIVERSITY
  COACHING_CENTER
  TRAINING_INSTITUTE
  NGO
  OTHER
}

model User {
  id           String         @id @default(uuid())
  name         String?
  email        String?        @unique
  password     String?
  verified     Boolean?       @default(false)
  role         String?        @default("user")
  mobileNo     String?        @unique
  country      String?
  city         String?
  address      String?
  postalCode   String?
  profilePic   String?
  bio          String?
  online       Boolean?       @default(false)
  lastSeen     DateTime?
  rating       Float?         @default(0)
  accountType  String?        @default("personal")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  quotePost    QuotePost[]
  quoteReply   QuoteReply[]
  quoteLike    QuoteLike[]
  generalPost  GeneralPost[]
  generalReply GeneralReply[]
  generalLike  GeneralLike[]
  blog         Blog[]
}

model ForumMainCategory {
  id          String             @id @default(uuid())
  name        String?
  enabled     Boolean?           @default(false)
  subCategory ForumSubCategory[]
  quotePost   QuotePost[]
  generalPost GeneralPost[]
}

model ForumSubCategory {
  id             String            @id @default(uuid())
  name           String?
  enabled        Boolean?          @default(false)
  mainCategoryId String
  quotePost      QuotePost[]
  generalPost    GeneralPost[]
  mainCategory   ForumMainCategory @relation(fields: [mainCategoryId], references: [id])
}

model QuotePost {
  id               String             @id @default(uuid())
  title            String?
  description      String?
  userId           String
  name             String?
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  totalNetWeight   Float?
  totalGrossWeight Float?
  volumetricWeight Float?
  transitInsurance Boolean?
  width            Float?
  height           Float?
  length           Float?
  viewCount        Int?
  likesCount       Int?
  commentsCount    Int?
  dangerousGoods   Boolean?
  status           String?            @default("pending")
  rejectionReason  String?
  fromPostalCode   String?
  toPostalCode     String?
  fromCity         String?
  toCity           String?
  fromCountry      String?
  toCountry        String?
  fromAddress      String?
  toAddress        String?
  fromState        String?
  toState          String?
  postMainCategory String?
  postSubCategory  String?
  shipmentType     String?
  quoteReply       QuoteReply[]
  quoteLike        QuoteLike[]
  subCategory      ForumSubCategory?  @relation(fields: [postSubCategory], references: [id])
  mainCategory     ForumMainCategory? @relation(fields: [postMainCategory], references: [id])
  user             User?              @relation(fields: [userId], references: [id])
}

model QuoteReply {
  id              String       @id @default(uuid())
  userId          String
  postId          String
  parentReplyId   String?
  description     String?
  createdAt       DateTime     @default(now())
  status          String?      @default("pending")
  rejectionReason String?
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            QuotePost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentReply     QuoteReply?  @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies    QuoteReply[] @relation("ReplyToReply")
}

model QuoteLike {
  id     String    @id @default(uuid())
  userId String
  postId String
  user   User      @relation(fields: [userId], references: [id])
  post   QuotePost @relation(fields: [postId], references: [id])
}
